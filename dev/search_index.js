var documenterSearchIndex = {"docs":
[{"location":"#SimpleRoots.jl","page":"SimpleRoots.jl","title":"SimpleRoots.jl","text":"","category":"section"},{"location":"","page":"SimpleRoots.jl","title":"SimpleRoots.jl","text":"Modules = [SimpleRoots]","category":"page"},{"location":"#SimpleRoots.Both","page":"SimpleRoots.jl","title":"SimpleRoots.Both","text":"Return both lower and upper result values as a tuple\n\n\n\n\n\n","category":"type"},{"location":"#SimpleRoots.Lower","page":"SimpleRoots.jl","title":"SimpleRoots.Lower","text":"Return the lower result value\n\n\n\n\n\n","category":"type"},{"location":"#SimpleRoots.QuadraticResult","page":"SimpleRoots.jl","title":"SimpleRoots.QuadraticResult","text":"Used to specifiy the result of quad, either Lower, Upper or Both\n\n\n\n\n\n","category":"type"},{"location":"#SimpleRoots.Secant","page":"SimpleRoots.jl","title":"SimpleRoots.Secant","text":"Secant(bracket)\nSecant(bracket...)\n\nSecant method of bracketed root-finding.\n\nBracket can be a length 2 vector, a tuple or 2 argument\n\n\n\n\n\n","category":"type"},{"location":"#SimpleRoots.Upper","page":"SimpleRoots.jl","title":"SimpleRoots.Upper","text":"Return the upper result value\n\n\n\n\n\n","category":"type"},{"location":"#SimpleRoots.findzero-Tuple{Any,Any}","page":"SimpleRoots.jl","title":"SimpleRoots.findzero","text":"findzero(f, bracket; atol=1e-7, max_iter=100)\nfindzero(f, method::AbstractBisection; atol=1e-7, max_iter=100)\n\nFind roots using the passed in method. If a bracket is passed in without specifying the method, use the Secant method.\n\n\n\n\n\n","category":"method"},{"location":"#SimpleRoots.findzero-Tuple{Any,Bisection,Any,Any}","page":"SimpleRoots.jl","title":"SimpleRoots.findzero","text":"findzero(f, method::Bisection, atol, max_iter)\nfindzero(f, method::Bisection; atol=1e-7, max_iter=100)\n\nFind root using the bisection method.\n\n\n\n\n\n","category":"method"},{"location":"#SimpleRoots.findzero-Tuple{Any,Brent,Any,Any}","page":"SimpleRoots.jl","title":"SimpleRoots.findzero","text":"findzero(f, method::Brent, atol, maxiter)\nfindzero(f, method::Brent; atol=1e-7, max_iter=100)\n\nFind root using Brents method. Returns a tuple of the found value and a Bool specifying wether the root was found within the tolerance, or not.\n\n\n\n\n\n","category":"method"},{"location":"#SimpleRoots.findzero-Tuple{Any,Secant,Any,Any}","page":"SimpleRoots.jl","title":"SimpleRoots.findzero","text":"findzero(f, method::Secant, atol, max_iter)\nfindzero(f, method::Secant; atol=1e-7, max_iter=100)\n\nFind root using the secant method.\n\n\n\n\n\n","category":"method"},{"location":"#SimpleRoots.quad-Tuple{SimpleRoots.QuadraticResult,Any,Any,Any}","page":"SimpleRoots.jl","title":"SimpleRoots.quad","text":"function quad(res::QuadraticResult, a, b, c)\n\nSimple quadratic equation solver.\n\nReturns the result specified with res Lower, Upper or Both\n\n\n\n\n\n","category":"method"}]
}
